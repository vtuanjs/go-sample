// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, description, note) VALUES ($1, $2, $3) RETURNING id, name, description, note, created_at, updated_at, deleted_at
`

type CreateRoleParams struct {
	Name        string
	Description string
	Note        string
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.Description, arg.Note)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :one
DELETE FROM roles WHERE id = $1 RETURNING id, name, description, note, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRow(ctx, deleteRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT id, name, description, note, created_at, updated_at FROM roles WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

type GetRoleRow struct {
	ID          int64
	Name        string
	Description string
	Note        string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) GetRole(ctx context.Context, id int64) (GetRoleRow, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i GetRoleRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, name, description, note, created_at, updated_at FROM roles WHERE deleted_at IS NULL
`

type GetRolesRow struct {
	ID          int64
	Name        string
	Description string
	Note        string
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) GetRoles(ctx context.Context) ([]GetRolesRow, error) {
	rows, err := q.db.Query(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolesRow
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Note,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles SET name = $2, description = $3, note = $4 WHERE id = $1 RETURNING id, name, description, note, created_at, updated_at, deleted_at
`

type UpdateRoleParams struct {
	ID          int64
	Name        string
	Description string
	Note        string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Note,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
