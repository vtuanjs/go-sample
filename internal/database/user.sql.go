// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (uuid, user_name, email, is_active) VALUES ($1, $2, $3, $4) RETURNING id, uuid, user_name, email, is_active, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Uuid     string
	UserName string
	Email    string
	IsActive bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Uuid,
		arg.UserName,
		arg.Email,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1 RETURNING id, uuid, user_name, email, is_active, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, uuid, user_name, email, is_active, created_at, updated_at FROM users WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

type GetUserRow struct {
	ID        int64
	Uuid      string
	UserName  string
	Email     string
	IsActive  bool
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, uuid, user_name, email, is_active, created_at, updated_at FROM users WHERE user_name = $1 AND deleted_at IS NULL LIMIT 1
`

type GetUserByEmailRow struct {
	ID        int64
	Uuid      string
	UserName  string
	Email     string
	IsActive  bool
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetUserByEmail(ctx context.Context, userName string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, userName)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, uuid, user_name, email, is_active, created_at, updated_at FROM users WHERE deleted_at IS NULL
`

type GetUsersRow struct {
	ID        int64
	Uuid      string
	UserName  string
	Email     string
	IsActive  bool
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.UserName,
			&i.Email,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET user_name = $2, is_active = $3 WHERE id = $1 RETURNING id, uuid, user_name, email, is_active, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID       int64
	UserName string
	IsActive bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.UserName, arg.IsActive)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.UserName,
		&i.Email,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
